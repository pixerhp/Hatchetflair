extends Node

const TCHUNK_L: int = 16
const TCHUNK_T: int = TCHUNK_L ** 3
const TCHUNK_S: Vector3i = Vector3i(TCHUNK_L, TCHUNK_L, TCHUNK_L)
const TCHUNK_HL: float = TCHUNK_L / 2.0
const TCHUNK_HS: Vector3 = Vector3(TCHUNK_HL, TCHUNK_HL, TCHUNK_HL)
const TCHUNK_HS2: Vector3 = Vector3(TCHUNK_HL - 0.5, TCHUNK_HL - 0.5, TCHUNK_HL - 0.5)
const TCHUNK_HS3: Vector3 = Vector3(TCHUNK_HL - 1, TCHUNK_HL - 1, TCHUNK_HL - 1)

const ts_tess_cube_move: Array[Vector3i] = [
	Vector3i(-1, 0, 0), Vector3i(1, 0, 0),
	Vector3i(0, -1, 0), Vector3i(0, 1, 0),
	Vector3i(0, 0, -1), Vector3i(0, 0, 1),
]
const ts_tess_cube_verts: PackedVector3Array = [
	Vector3(0, 0, 0)-TCHUNK_HS,Vector3(0, 1, 0)-TCHUNK_HS,Vector3(0, 0, 1)-TCHUNK_HS,Vector3(0, 1, 1)-TCHUNK_HS,
	Vector3(1, 0, 1)-TCHUNK_HS,Vector3(1, 1, 1)-TCHUNK_HS,Vector3(1, 0, 0)-TCHUNK_HS,Vector3(1, 1, 0)-TCHUNK_HS,
	
	Vector3(1, 0, 0)-TCHUNK_HS,Vector3(0, 0, 0)-TCHUNK_HS,Vector3(1, 0, 1)-TCHUNK_HS,Vector3(0, 0, 1)-TCHUNK_HS,
	Vector3(0, 1, 0)-TCHUNK_HS,Vector3(1, 1, 0)-TCHUNK_HS,Vector3(0, 1, 1)-TCHUNK_HS,Vector3(1, 1, 1)-TCHUNK_HS,
	
	Vector3(1, 0, 0)-TCHUNK_HS,Vector3(1, 1, 0)-TCHUNK_HS,Vector3(0, 0, 0)-TCHUNK_HS,Vector3(0, 1, 0)-TCHUNK_HS,
	Vector3(0, 0, 1)-TCHUNK_HS,Vector3(0, 1, 1)-TCHUNK_HS,Vector3(1, 0, 1)-TCHUNK_HS,Vector3(1, 1, 1)-TCHUNK_HS,
]
# (Tesselated cube doesn't have norms because we can reuse index 0-5 of 'move' as them.)

const ts_tess_rhombdo_move: Array[Vector3i] = [
	Vector3i(0, -1, -1), Vector3i(-1, 0, -1), Vector3i(1, 0, -1), Vector3i(0, 1, -1), 
	Vector3i(-1, -1, 0), Vector3i(1, -1, 0), Vector3i(-1, 1, 0), Vector3i(1, 1, 0), 
	Vector3i(0, -1, 1), Vector3i(-1, 0, 1), Vector3i(1, 0, 1), Vector3i(0, 1, 1), 
	
	Vector3i(0, -1, 0), Vector3i(0, 0, -1), Vector3i(0, 0, -1), Vector3i(-1, 0, 0), 
	Vector3i(1, 0, 0), Vector3i(0, 0, -1), Vector3i(0, 0, -1), Vector3i(0, 1, 0), 
	Vector3i(0, -1, 0), Vector3i(-1, 0, 0), Vector3i(0, -1, 0), Vector3i(1, 0, 0), 
	Vector3i(-1, 0, 0), Vector3i(0, 1, 0), Vector3i(1, 0, 0), Vector3i(0, 1, 0), 
	Vector3i(0, -1, 0), Vector3i(0, 0, 1), Vector3i(-1, 0, 0), Vector3i(0, 0, 1), 
	Vector3i(0, 0, 1), Vector3i(1, 0, 0), Vector3i(0, 0, 1), Vector3i(0, 1, 0), 
]
const ts_tess_rhombdo_verts: PackedVector3Array = [
	Vector3(0, -1, 0) - TCHUNK_HS2, Vector3(0.5, -0.5, -0.5) - TCHUNK_HS2, 
		Vector3(-0.5, -0.5, -0.5) - TCHUNK_HS2, Vector3(0, 0, -1) - TCHUNK_HS2,
	Vector3(0, 0, -1) - TCHUNK_HS2, Vector3(-0.5, 0.5, -0.5) - TCHUNK_HS2, 
		Vector3(-0.5, -0.5, -0.5) - TCHUNK_HS2, Vector3(-1, 0, 0) - TCHUNK_HS2,
	Vector3(1, 0, 0) - TCHUNK_HS2, Vector3(0.5, 0.5, -0.5) - TCHUNK_HS2, 
		Vector3(0.5, -0.5, -0.5) - TCHUNK_HS2, Vector3(0, 0, -1) - TCHUNK_HS2,
	Vector3(0, 0, -1) - TCHUNK_HS2, Vector3(0.5, 0.5, -0.5) - TCHUNK_HS2, 
		Vector3(-0.5, 0.5, -0.5) - TCHUNK_HS2, Vector3(0, 1, 0) - TCHUNK_HS2,
	
	Vector3(0, -1, 0) - TCHUNK_HS2, Vector3(-0.5, -0.5, -0.5) - TCHUNK_HS2, 
		Vector3(-0.5, -0.5, 0.5) - TCHUNK_HS2, Vector3(-1, 0, 0) - TCHUNK_HS2,
	Vector3(0, -1, 0) - TCHUNK_HS2, Vector3(0.5, -0.5, 0.5) - TCHUNK_HS2, 
		Vector3(0.5, -0.5, -0.5) - TCHUNK_HS2, Vector3(1, 0, 0) - TCHUNK_HS2,
	Vector3(-1, 0, 0) - TCHUNK_HS2, Vector3(-0.5, 0.5, -0.5) - TCHUNK_HS2, 
		Vector3(-0.5, 0.5, 0.5) - TCHUNK_HS2, Vector3(0, 1, 0) - TCHUNK_HS2,
	Vector3(1, 0, 0) - TCHUNK_HS2, Vector3(0.5, 0.5, 0.5) - TCHUNK_HS2, 
		Vector3(0.5, 0.5, -0.5) - TCHUNK_HS2, Vector3(0, 1, 0) - TCHUNK_HS2,
	
	Vector3(0, -1, 0) - TCHUNK_HS2, Vector3(-0.5, -0.5, 0.5) - TCHUNK_HS2, 
		Vector3(0.5, -0.5, 0.5) - TCHUNK_HS2, Vector3(0, 0, 1) - TCHUNK_HS2,
	Vector3(-1, 0, 0) - TCHUNK_HS2, Vector3(-0.5, 0.5, 0.5) - TCHUNK_HS2, 
		Vector3(-0.5, -0.5, 0.5) - TCHUNK_HS2, Vector3(0, 0, 1) - TCHUNK_HS2,
	Vector3(0, 0, 1) - TCHUNK_HS2, Vector3(0.5, 0.5, 0.5) - TCHUNK_HS2, 
		Vector3(0.5, -0.5, 0.5) - TCHUNK_HS2, Vector3(1, 0, 0) - TCHUNK_HS2,
	Vector3(0, 0, 1) - TCHUNK_HS2, Vector3(-0.5, 0.5, 0.5) - TCHUNK_HS2, 
		Vector3(0.5, 0.5, 0.5) - TCHUNK_HS2, Vector3(0, 1, 0) - TCHUNK_HS2,
]
const ts_tess_rhombdo_norms: PackedVector3Array = [
	0.70710678 * Vector3(ts_tess_rhombdo_move[0]),
	0.70710678 * Vector3(ts_tess_rhombdo_move[1]),
	0.70710678 * Vector3(ts_tess_rhombdo_move[2]),
	0.70710678 * Vector3(ts_tess_rhombdo_move[3]),
	
	0.70710678 * Vector3(ts_tess_rhombdo_move[4]),
	0.70710678 * Vector3(ts_tess_rhombdo_move[5]),
	0.70710678 * Vector3(ts_tess_rhombdo_move[6]),
	0.70710678 * Vector3(ts_tess_rhombdo_move[7]),
	
	0.70710678 * Vector3(ts_tess_rhombdo_move[8]),
	0.70710678 * Vector3(ts_tess_rhombdo_move[9]),
	0.70710678 * Vector3(ts_tess_rhombdo_move[10]),
	0.70710678 * Vector3(ts_tess_rhombdo_move[11]),
]

# A list of unique vertex states, analogous to all others using rotations, flipping and state inversion.
var ts_march_patt_states: PackedByteArray = [
	0b00000000, 0b00000001, 0b00000011, 0b00001001, 0b10000001,
	0b00000111, 0b01000011, 0b01001001, 0b00001111, 0b00010111,
	0b00100111, 0b11000011, 0b10000111, 0b01101001, ]

var ts_march_ang_patt_verts: PackedVector3Array = PackedVector3Array([
	# Edge midpoints: (0-11)
	Vector3(0,-0.5,-0.5), Vector3(-0.5,0,-0.5), 
	Vector3(0.5,0,-0.5), Vector3(0,0.5,-0.5),
	Vector3(-0.5,-0.5,0), Vector3(0.5,-0.5,0),
	Vector3(-0.5,0.5,0), Vector3(0.5,0.5,0),
	Vector3(0,-0.5,0.5), Vector3(-0.5,0,0.5), 
	Vector3(0.5,0,0.5), Vector3(0,0.5,0.5),
	# Face ambiguity center-points: (12-17)
	Vector3(0,0,-0.5), Vector3(0,-0.5,0),
	Vector3(-0.5,0,0), Vector3(0.5,0,0),
	Vector3(0,0.5,0), Vector3(0,0,0.5),
	# Volume center-point: (18)
	Vector3(0,0,0),
	# 8-section center-points: (19-26)
	Vector3(-0.25,-0.25,-0.25), Vector3(0.25,-0.25,-0.25), 
	Vector3(-0.25,0.25,-0.25), Vector3(0.25,0.25,-0.25), 
	Vector3(-0.25,-0.25,0.25), Vector3(0.25,-0.25,0.25), 
	Vector3(-0.25,0.25,0.25), Vector3(0.25,0.25,0.25), 
])

var ts_march_ang_patt_inds: Array = [
	[[], [], [], [], [], [], [], []],
	[[0,1,4], [], [], [], [], [], [], []],
	[[4,12,1, 12,1,13], [13,2,12, 2,13,5], [], [], [], [], [], []],
	[[0,12,4, 4,12,1], [], [], [3,12,7, 7,12,2], [], [], [], []],
	[[0,1,4], [], [], [], [], [], [], [11,7,10]],
	
	[[18,14,4, 18,4,13], [18,13,5, 18,5,2], [18,3,6, 18,6,14], [18,2,3], [], [], [], []],
	[[14,3,13, 14,13,12, 14,12,1], [13,5,2, 13,2,12], [], [], [], [], [11,14,6, 11,9,14], []],
	[[4,0,14, 19,0,12, 19,12,1, 19,1,14], [], [], [2,7,12, 22,7,16, 22,16,3, 22,3,12], [], [], [11,9,16, 25,9,14, 25,14,6, 25,6,16], []],
	[[4,13,14, 18,14,13], [13,5,18, 15,18,5], [14,18,6, 16,6,18], [18,15,16, 7,16,15], [], [], [], []], # 1111 simple
	[[], [18,5,2], [18,3,6], [18,2,3], [18,9,8], [18,8,5], [18,6,9], []], # the hexagon
	
	[[18,14,4], [18,15,2], [18,3,6, 18,6,14], [18,2,3], [18,4,8], [18,8,10, 18,10,15], [], []], # beautiful symmetry
	[[1,14,12, 18,12,14, 14,4,18, 13,18,4], [12,18,2, 15,2,18, 18,13,15, 5,15,13], [], [], [], [], [9,14,17, 18,17,14, 14,6,18, 16,18,6], [17,18,10, 15,10,18, 18,16,15, 7,15,16]], # extruded + sign
	[[13,18,4, 14,4,18], [5,15,13, 18,13,15], [18,16,14, 6,14,16], [18,15,16, 16,15,3, 2,3,15], [], [], [], [7,15,16, 16,15,11, 10,11,15]], # intersecting rects
	[[18,12,1, 18,1,14, 18,13,0, 18,0,12, 18,14,4, 18,4,13], [], [], [18,12,2, 18,2,15, 18,16,3, 18,3,12, 18,15,7, 18,7,16], [], [18,17,10, 18,10,15, 18,13,8, 18,8,17, 18,15,5, 18,5,13], [18,17,9, 18,9,14, 18,16,11, 18,11,17, 18,14,6, 18,6,16], []], # maximum ambiguity
]

var ts_march_ang_inds: Array = [
	
]

func generate_march_ang_tables() -> void:
	var inds_string: String = ""
	
	var patt_i: int = 0; 
	var rot_z: int = 0; var rot_y: int = 0; var rot_x: int = 0; 
	var flip_x: bool = false; var inv_state: bool = false
	
	for comb: int in range(0, 256):
		for i: int in range(0, ts_march_patt_states.size()*4*4*4*2*2):
			inv_state = bool(posmod(i, 2)); flip_x = bool(posmod(i/2, 2))
			rot_x = posmod(i/4, 4); rot_y = posmod(i/16, 4); rot_z = posmod(i/64, 4)
			patt_i = i/256
			if tranform_march_states(comb, rot_z, rot_y, rot_x, flip_x, inv_state) == ts_march_patt_states[patt_i]:
				inds_string += str(detransform_march_ang_inds(patt_i, rot_z, rot_y, rot_x, flip_x, inv_state)).dedent() + ",\n"
				break
	
	print("[[][][]] MARCHING CUBES INDICES TABLE:: [[][][]]\n")
	print(inds_string)
	print("[[][][]] ::MARCHING CUBES INDICES TABLE [[][][]]\n")

func tranform_march_states(comb: int, rot_z: int, rot_y: int, rot_x: int, flip_x: bool, inv_state: bool) -> int:
	
	
	
	return 0

func detransform_march_ang_inds(comb: int, rot_z: int, rot_y: int, rot_x: int, flip_x: bool, inv_state: bool) -> Array[PackedByteArray]:
	
	
	
	
	return []


# Body-centered (regular) marching cubes patterns data:
const ts_bc_march_pattern_verts: PackedVector3Array = [
	# Edge midpoints:
	Vector3(0,-0.5,-0.5), Vector3(-0.5,0,-0.5), 
	Vector3(0.5,0,-0.5), Vector3(0,0.5,-0.5),
	Vector3(-0.5,-0.5,0), Vector3(0.5,-0.5,0),
	Vector3(-0.5,0.5,0), Vector3(0.5,0.5,0),
	Vector3(0,-0.5,0.5), Vector3(-0.5,0,0.5), 
	Vector3(0.5,0,0.5), Vector3(0,0.5,0.5),
	# Face ambiguity center-points:
	Vector3(0,0,-0.5), Vector3(0,-0.5,0),
	Vector3(-0.5,0,0), Vector3(0.5,0,0),
	Vector3(0,0.5,0), Vector3(0,0,0.5),
	# Volume center-point:
	Vector3(0,0,0),
]
var ts_bc_march_pattern_inds: Array[PackedByteArray] = [ 
	[],
	[0,1,4],
	[2,1,4, 4,5,2],
	[0,12,4, 4,12,1, 3,12,7, 7,12,2],
	[0,1,4, 11,7,10],
	
	[4,5,2, 4,2,3, 4,3,6],
	[14,2,1, 14,5,2, 14,4,5, 14,6,11, 14,11,9],
	[0,14,4, 0,12,14, 1,14,12,  7,12,2, 7,16,12, 3,12,16,  9,16,11, 9,14,16, 6,16,14],
	[5,7,6, 6,4,5],
	[2,6,8,  3,6,2, 5,2,8, 9,8,6],
	
	[2,3,10, 3,6,10, 8,10,6, 4,8,6],
	[1,14,2, 15,2,14,  7,15,6, 14,6,15,  9,14,10, 15,10,14,  5,15,4, 14,4,15],
	[4,5,15, 4,15,16, 4,16,6,  7,15,16,  2,3,16, 2,16,15,  10,11,16, 10,16,15],
	[18,13,12, 0,12,13,  18,14,13, 4,13,14,  18,13,17, 8,17,13,  18,15,13, 5,13,15,
		18,12,1, 18,1,14,  18,9,14, 18,17,9,  18,17,10, 18,10,15,  18,2,15, 18,12,2,
		18,16,12, 3,12,16,  18,14,16, 6,16,14,  18,16,17, 11,17,16,  18,15,16, 7,16,15],
]

# Vertex-centered marching cubes patterns data:
const ts_vc_march_pattern_verts: PackedVector3Array = [
	
]
var ts_vc_march_pattern_inds: Array = [ # !!! consider how to implement three weight-based ambiguity solutions?
	[[], [], [], [], [], [], [], [],],
	
]


# inneficient brute-forcing, but that's OK because it's just a dev tool.
func print_bc_march_table():
	var inds_string: String = ""
	
	var patt_i: int = 0
	var rot_z: int = 0
	var rot_y: int = 0
	var rot_x: int = 0
	var flip_x: bool = false
	var inv_state: bool = false
	
	for comb in range(0, 256):
		for i in range(0, 4*4*4*2*2*ts_march_patt_states.size()):
			inv_state = bool(posmod(i, 2))
			flip_x = bool(posmod(i/2, 2))
			rot_x = posmod(i/4, 4)
			rot_y = posmod(i/16, 4)
			rot_z = posmod(i/64, 4)
			patt_i = i/256
			if (transform_bc_march_state(comb, rot_z, rot_y, rot_x, flip_x, inv_state) == 
			ts_march_patt_states[patt_i]):
				inds_string += str(
					detransform_bc_march_inds(patt_i, rot_z, rot_y, rot_x, flip_x, inv_state)
				) + ",\n"
				break
	
	print("//////// MARCHING CUBES INDICES TABLE: ////////\n")
	print(inds_string)
	print("\n\n\n\n")

func transform_bc_march_state(comb, rot_z, rot_y, rot_x, flip_x, inv_state) -> int:
	for i in range(0, rot_z):
		comb = (((comb & 0b00010001) << 1) | ((comb & 0b00100010) << 2) | 
				((comb & 0b10001000) >> 1) | ((comb & 0b01000100) >> 2))
	for i in range(0, rot_y):
		comb = (((comb & 0b00000101) << 4) | ((comb & 0b01010000) << 1) | 
				((comb & 0b00001010) >> 1) | ((comb & 0b10100000) >> 4))
	for i in range(0, rot_x):
		comb = (((comb & 0b00110000) >> 4) | ((comb & 0b00000011) << 2) | 
				((comb & 0b11000000) >> 2) | ((comb & 0b00001100) << 4))
	if flip_x:
		comb = ((comb & 0b10101010) >> 1) | ((comb & 0b01010101) << 1)
	if inv_state:
		comb = ~ comb
	return PackedByteArray([comb])[0]

func detransform_bc_march_inds(patt_i, rot_z, rot_y, rot_x, flip_x, inv_state) -> PackedByteArray:
	var inds: PackedByteArray = ts_bc_march_pattern_inds[patt_i].duplicate()
	if inv_state:
		inds.reverse()
	if flip_x:
		for i in range(0, inds.size()):
			if inds[i] in [1,4,6,9,14]:
				inds[i] += 1
			elif inds[i] in [2,5,7,10,15]:
				inds[i] -= 1
		inds.reverse()
	for _r in range(0, rot_x):
		for i in range(0, inds.size()):
			match inds[i]:
				0: inds[i] = 8
				4, 5: inds[i] += 5
				1, 2, 8: inds[i] += 3
				3, 9, 10: inds[i] -= 3
				6, 7: inds[i] -= 5
				11: inds[i] = 3
				12: inds[i] = 13
				13: inds[i] = 17
				17: inds[i] = 16
				16: inds[i] = 12
	for _r in range(0, rot_y):
		for i in range(0, inds.size()):
			match inds[i]:
				2: inds[i] = 10
				0: inds[i] = 5
				3, 7: inds[i] += 4
				5, 12: inds[i] += 3
				15: inds[i] = 17
				1: inds[i] = 2
				10: inds[i] = 9
				14: inds[i] = 12
				6, 17: inds[i] -= 3
				4, 8: inds[i] -= 4
				11: inds[i] = 6
				9: inds[i] = 1
	for _r in range(0, rot_z):
		for i in range(0, inds.size()):
			match inds[i]:
				1, 4, 9, 14: inds[i] += 2
				0, 6, 8, 13: inds[i] += 1
				3, 5, 11, 16: inds[i] -= 1
				2, 7, 10, 15: inds[i] -= 2
	inds.reverse() # Account for positive z being the opposite direction in Godot than in the data.
	return inds

func triangle_normal_vector(verts: PackedVector3Array) -> Vector3:
	return ((verts[2]-verts[0]).cross((verts[1]-verts[0]))).normalized()

var ts_march_inds: Array[PackedByteArray] = [
	[],
	[4, 1, 0],
	[0, 2, 5],
	[2, 5, 4, 4, 1, 2],
	[1, 6, 3],
	[0, 4, 6, 6, 3, 0],
	[0, 12, 5, 5, 12, 2, 3, 12, 6, 6, 12, 1],
	[6, 3, 4, 3, 2, 4, 2, 5, 4],
	[3, 7, 2],
	[2, 12, 7, 7, 12, 3, 1, 12, 4, 4, 12, 0],
	[5, 0, 3, 3, 7, 5],
	[5, 4, 1, 5, 1, 3, 5, 3, 7],
	[7, 2, 1, 1, 6, 7],
	[6, 7, 2, 6, 2, 0, 6, 0, 4],
	[5, 0, 7, 0, 1, 7, 1, 6, 7],
	[5, 4, 6, 6, 7, 5],
	[9, 4, 8],
	[8, 9, 1, 1, 0, 8],
	[5, 13, 2, 2, 13, 0, 4, 13, 9, 9, 13, 8],
	[2, 5, 1, 5, 8, 1, 8, 9, 1],
	[9, 14, 8, 8, 14, 4, 1, 14, 3, 3, 14, 6],
	[0, 8, 9, 0, 9, 6, 0, 6, 3],
	[14, 12, 1, 12, 14, 6, 3, 12, 6, 12, 13, 0, 13, 12, 2, 5, 13, 2, 13, 14, 4, 14, 13, 8, 9, 14, 8],
	[6, 8, 9, 8, 2, 5, 2, 6, 3, 8, 6, 2],
	[7, 2, 3, 9, 4, 8],
	[3, 7, 12, 7, 2, 12, 9, 1, 12, 8, 9, 12, 0, 8, 12],
	[13, 7, 5, 13, 3, 7, 13, 0, 3, 13, 8, 9, 13, 9, 4],
	[1, 3, 9, 3, 7, 9, 8, 9, 7, 5, 8, 7],
	[4, 8, 14, 8, 9, 14, 2, 1, 14, 7, 2, 14, 6, 7, 14],
	[7, 9, 6, 7, 8, 9, 8, 7, 2, 8, 2, 0],
	[14, 13, 1, 13, 0, 1, 14, 13, 9, 13, 8, 9, 13, 14, 4, 5, 13, 7, 13, 14, 7, 14, 6, 7],
	[5, 8, 7, 8, 9, 7, 9, 6, 7],
	[8, 5, 10],
	[8, 13, 10, 10, 13, 5, 0, 13, 1, 1, 13, 4],
	[10, 8, 0, 0, 2, 10],
	[10, 8, 2, 8, 4, 2, 4, 1, 2],
	[8, 5, 10, 3, 1, 6],
	[13, 3, 0, 13, 6, 3, 13, 4, 6, 13, 5, 10, 13, 10, 8],
	[1, 6, 12, 6, 3, 12, 8, 0, 12, 10, 8, 12, 2, 10, 12],
	[6, 8, 4, 6, 10, 8, 10, 6, 3, 10, 3, 2],
	[5, 15, 8, 8, 15, 10, 7, 15, 3, 3, 15, 2],
	[8, 15, 10, 8, 13, 15, 5, 15, 13, 1, 13, 4, 1, 12, 13, 0, 13, 12, 7, 12, 3, 7, 15, 12, 2, 12, 15],
	[3, 7, 0, 7, 10, 0, 10, 8, 0],
	[1, 7, 8, 3, 7, 1, 4, 1, 8, 10, 8, 7],
	[15, 6, 7, 15, 1, 6, 15, 2, 1, 15, 10, 8, 15, 8, 5],
	[6, 7, 15, 6, 15, 13, 6, 13, 4, 5, 15, 13, 10, 8, 13, 10, 13, 15, 2, 0, 13, 2, 13, 15],
	[0, 10, 8, 0, 7, 10, 7, 0, 1, 7, 1, 6],
	[6, 7, 10, 6, 10, 8, 6, 8, 4],
	[5, 10, 9, 9, 4, 5],
	[1, 0, 9, 0, 5, 9, 5, 10, 9],
	[10, 9, 4, 10, 4, 0, 10, 0, 2],
	[10, 9, 1, 1, 2, 10],
	[6, 3, 14, 3, 1, 14, 10, 9, 14, 5, 10, 14, 4, 5, 14],
	[0, 5, 3, 5, 10, 3, 6, 3, 10, 9, 6, 10],
	[10, 9, 14, 10, 14, 12, 10, 12, 2, 1, 14, 12, 4, 0, 12, 4, 12, 14, 6, 3, 12, 6, 12, 14],
	[9, 6, 10, 6, 3, 10, 3, 2, 10],
	[15, 4, 5, 15, 9, 4, 15, 10, 9, 15, 2, 3, 15, 3, 7],
	[15, 12, 7, 12, 3, 7, 15, 12, 5, 12, 0, 5, 12, 15, 2, 1, 12, 9, 12, 15, 9, 15, 10, 9],
	[3, 4, 0, 3, 9, 4, 9, 3, 7, 9, 7, 10],
	[1, 3, 9, 3, 7, 9, 7, 10, 9],
	[1, 14, 2, 15, 2, 14, 7, 15, 6, 14, 6, 15, 9, 14, 10, 15, 10, 14, 5, 15, 4, 14, 4, 15],
	[2, 0, 15, 0, 5, 15, 6, 7, 15, 9, 6, 15, 10, 9, 15],
	[14, 10, 9, 14, 7, 10, 14, 6, 7, 14, 4, 0, 14, 0, 1],
	[10, 9, 6, 6, 7, 10],
	[6, 9, 11],
	[6, 14, 11, 11, 14, 9, 4, 14, 0, 0, 14, 1],
	[0, 2, 5, 11, 6, 9],
	[9, 11, 14, 11, 6, 14, 5, 4, 14, 2, 5, 14, 1, 2, 14],
	[9, 11, 3, 3, 1, 9],
	[0, 4, 3, 4, 9, 3, 9, 11, 3],
	[2, 5, 12, 5, 0, 12, 11, 3, 12, 9, 11, 12, 1, 9, 12],
	[3, 2, 11, 2, 5, 11, 9, 11, 5, 4, 9, 5],
	[3, 16, 2, 2, 16, 7, 11, 16, 9, 9, 16, 6],
	[14, 16, 6, 16, 14, 9, 11, 16, 9, 16, 12, 3, 12, 16, 7, 2, 12, 7, 12, 14, 1, 14, 12, 0, 4, 14, 0],
	[6, 9, 16, 9, 11, 16, 0, 3, 16, 5, 0, 16, 7, 5, 16],
	[5, 4, 14, 5, 14, 16, 5, 16, 7, 6, 14, 16, 1, 3, 16, 1, 16, 14, 9, 11, 16, 9, 16, 14],
	[9, 11, 1, 11, 7, 1, 7, 2, 1],
	[2, 11, 7, 11, 4, 9, 4, 2, 0, 11, 2, 4],
	[5, 0, 7, 0, 1, 7, 11, 7, 1, 9, 11, 1],
	[5, 4, 9, 5, 9, 11, 5, 11, 7],
	[4, 8, 11, 11, 6, 4],
	[11, 6, 8, 6, 1, 8, 1, 0, 8],
	[13, 6, 4, 13, 11, 6, 13, 8, 11, 13, 0, 2, 13, 2, 5],
	[2, 6, 1, 2, 11, 6, 11, 2, 5, 11, 5, 8],
	[11, 3, 1, 11, 1, 4, 11, 4, 8],
	[8, 11, 3, 3, 0, 8],
	[11, 3, 12, 11, 12, 13, 11, 13, 8, 0, 12, 13, 1, 4, 13, 1, 13, 12, 2, 5, 13, 2, 13, 12],
	[11, 3, 2, 11, 2, 5, 11, 5, 8],
	[7, 2, 16, 2, 3, 16, 8, 11, 16, 4, 8, 16, 6, 4, 16],
	[12, 16, 1, 16, 6, 1, 12, 16, 2, 16, 7, 2, 16, 12, 3, 11, 16, 8, 16, 12, 8, 12, 0, 8],
	[3, 16, 0, 13, 0, 16, 5, 13, 7, 16, 7, 13, 11, 16, 8, 13, 8, 16, 4, 13, 6, 16, 6, 13],
	[16, 8, 11, 16, 5, 8, 16, 7, 5, 16, 6, 1, 16, 1, 3],
	[11, 4, 8, 11, 1, 4, 1, 11, 7, 1, 7, 2],
	[11, 7, 8, 7, 2, 8, 2, 0, 8],
	[0, 1, 13, 1, 4, 13, 7, 5, 13, 11, 7, 13, 8, 11, 13],
	[8, 11, 7, 7, 5, 8],
	[10, 17, 5, 5, 17, 8, 9, 17, 6, 6, 17, 11],
	[14, 13, 4, 13, 14, 1, 0, 13, 1, 13, 17, 8, 17, 13, 5, 10, 17, 5, 17, 14, 9, 14, 17, 11, 6, 14, 11],
	[17, 2, 10, 17, 0, 2, 17, 8, 0, 17, 11, 6, 17, 6, 9],
	[14, 17, 4, 17, 8, 4, 14, 17, 6, 17, 11, 6, 17, 14, 9, 10, 17, 2, 17, 14, 2, 14, 1, 2],
	[17, 1, 9, 17, 3, 1, 17, 11, 3, 17, 8, 5, 17, 5, 10],
	[17, 13, 10, 13, 5, 10, 17, 13, 9, 13, 4, 9, 13, 17, 8, 0, 13, 3, 13, 17, 3, 17, 11, 3],
	[17, 0, 12, 0, 17, 8, 12, 9, 17, 9, 12, 1, 17, 3, 12, 3, 17, 11, 12, 10, 17, 10, 12, 2],
	[8, 4, 17, 4, 9, 17, 2, 10, 17, 3, 2, 17, 11, 3, 17],
	[3, 15, 2, 3, 16, 15, 7, 15, 16, 9, 16, 6, 9, 17, 16, 11, 16, 17, 5, 17, 8, 5, 15, 17, 10, 17, 15],
	[15, 16, 7, 16, 15, 18, 16, 17, 11, 17, 16, 18, 14, 16, 6, 16, 14, 18, 16, 12, 3, 12, 16, 18, 2, 12, 18, 15, 2, 18, 15, 10, 18, 10, 17, 18, 9, 17, 18, 14, 9, 18, 14, 1, 18, 1, 12, 18, 15, 13, 5, 13, 15, 18, 13, 17, 8, 17, 13, 18, 14, 13, 4, 13, 14, 18, 13, 12, 0, 12, 13, 18],
	[17, 16, 9, 16, 6, 9, 17, 16, 10, 16, 7, 10, 16, 17, 11, 3, 16, 0, 16, 17, 0, 17, 8, 0],
	[3, 14, 1, 3, 16, 14, 6, 14, 16, 10, 16, 7, 10, 17, 16, 11, 16, 17, 4, 17, 8, 4, 14, 17, 9, 17, 14],
	[15, 17, 5, 17, 8, 5, 15, 17, 7, 17, 11, 7, 17, 15, 10, 9, 17, 1, 17, 15, 1, 15, 2, 1],
	[15, 13, 5, 13, 15, 2, 0, 13, 2, 13, 17, 8, 17, 13, 4, 9, 17, 4, 17, 15, 10, 15, 17, 11, 7, 15, 11],
	[11, 7, 17, 7, 10, 17, 1, 9, 17, 0, 1, 17, 8, 0, 17],
	[9, 17, 4, 4, 17, 8, 10, 17, 7, 7, 17, 11],
	[4, 5, 10, 4, 10, 11, 4, 11, 6],
	[1, 11, 6, 11, 5, 10, 5, 1, 0, 11, 1, 5],
	[4, 0, 6, 0, 2, 6, 11, 6, 2, 10, 11, 2],
	[10, 11, 2, 11, 6, 2, 6, 1, 2],
	[3, 10, 11, 3, 5, 10, 5, 3, 1, 5, 1, 4],
	[0, 5, 3, 5, 10, 3, 10, 11, 3],
	[12, 11, 3, 12, 10, 11, 12, 2, 10, 12, 1, 4, 12, 4, 0],
	[11, 3, 2, 2, 10, 11],
	[4, 5, 15, 4, 15, 16, 4, 16, 6, 7, 15, 16, 2, 3, 16, 2, 16, 15, 10, 11, 16, 10, 16, 15],
	[15, 16, 7, 16, 15, 10, 11, 16, 10, 16, 12, 3, 12, 16, 6, 1, 12, 6, 12, 15, 2, 15, 12, 0, 5, 15, 0],
	[16, 0, 3, 16, 4, 0, 16, 6, 4, 16, 7, 10, 16, 10, 11],
	[3, 16, 1, 1, 16, 6, 11, 16, 10, 10, 16, 7],
	[10, 11, 15, 11, 7, 15, 4, 5, 15, 1, 4, 15, 2, 1, 15],
	[5, 15, 0, 0, 15, 2, 7, 15, 11, 11, 15, 10],
	[0, 1, 4, 11, 7, 10],
	[7, 10, 11],
	[11, 10, 7],
	[10, 7, 11, 4, 1, 0],
	[10, 15, 11, 11, 15, 7, 2, 15, 0, 0, 15, 5],
	[15, 1, 2, 15, 4, 1, 15, 5, 4, 15, 7, 11, 15, 11, 10],
	[7, 16, 10, 10, 16, 11, 6, 16, 1, 1, 16, 3],
	[11, 10, 16, 10, 7, 16, 4, 6, 16, 0, 4, 16, 3, 0, 16],
	[0, 15, 5, 0, 12, 15, 2, 15, 12, 6, 12, 1, 6, 16, 12, 3, 12, 16, 10, 16, 11, 10, 15, 16, 7, 16, 15],
	[15, 16, 10, 16, 11, 10, 15, 16, 2, 16, 3, 2, 16, 15, 7, 6, 16, 4, 16, 15, 4, 15, 5, 4],
	[11, 10, 2, 2, 3, 11],
	[0, 4, 12, 4, 1, 12, 10, 2, 12, 11, 10, 12, 3, 11, 12],
	[3, 11, 10, 3, 10, 5, 3, 5, 0],
	[4, 1, 5, 1, 3, 5, 10, 5, 3, 11, 10, 3],
	[2, 1, 6, 2, 6, 11, 2, 11, 10],
	[2, 11, 10, 2, 6, 11, 6, 2, 0, 6, 0, 4],
	[5, 1, 11, 0, 1, 5, 10, 5, 11, 6, 11, 1],
	[6, 11, 4, 11, 10, 4, 10, 5, 4],
	[11, 17, 7, 7, 17, 10, 8, 17, 4, 4, 17, 9],
	[17, 0, 8, 17, 1, 0, 17, 9, 1, 17, 10, 7, 17, 7, 11],
	[11, 15, 7, 11, 17, 15, 10, 15, 17, 4, 17, 9, 4, 13, 17, 8, 17, 13, 2, 13, 0, 2, 15, 13, 5, 13, 15],
	[1, 2, 15, 1, 15, 17, 1, 17, 9, 10, 15, 17, 7, 11, 17, 7, 17, 15, 5, 8, 17, 5, 17, 15],
	[14, 17, 9, 17, 14, 4, 8, 17, 4, 17, 16, 11, 16, 17, 10, 7, 16, 10, 16, 14, 6, 14, 16, 3, 1, 14, 3],
	[0, 8, 17, 0, 17, 16, 0, 16, 3, 11, 17, 16, 10, 7, 16, 10, 16, 17, 9, 6, 16, 9, 16, 17],
	[18, 13, 12, 0, 12, 13, 18, 14, 13, 4, 13, 14, 18, 13, 17, 8, 17, 13, 18, 15, 13, 5, 13, 15, 18, 12, 1, 18, 1, 14, 18, 9, 14, 18, 17, 9, 18, 17, 10, 18, 10, 15, 18, 2, 15, 18, 12, 2, 18, 16, 12, 3, 12, 16, 18, 14, 16, 6, 16, 14, 18, 16, 17, 11, 17, 16, 18, 15, 16, 7, 16, 15],
	[15, 17, 10, 17, 15, 5, 8, 17, 5, 17, 16, 11, 16, 17, 9, 6, 16, 9, 16, 15, 7, 15, 16, 3, 2, 15, 3],
	[17, 3, 11, 17, 2, 3, 17, 10, 2, 17, 9, 4, 17, 4, 8],
	[2, 12, 10, 17, 10, 12, 11, 17, 3, 12, 3, 17, 1, 12, 9, 17, 9, 12, 8, 17, 0, 12, 0, 17],
	[3, 11, 17, 3, 17, 13, 3, 13, 0, 8, 17, 13, 9, 4, 13, 9, 13, 17, 10, 5, 13, 10, 13, 17],
	[10, 5, 17, 5, 8, 17, 3, 11, 17, 1, 3, 17, 9, 1, 17],
	[2, 1, 14, 2, 14, 17, 2, 17, 10, 9, 14, 17, 6, 11, 17, 6, 17, 14, 4, 8, 17, 4, 17, 14],
	[9, 6, 17, 6, 11, 17, 0, 8, 17, 2, 0, 17, 10, 2, 17],
	[11, 14, 6, 11, 17, 14, 9, 14, 17, 5, 17, 10, 5, 13, 17, 8, 17, 13, 1, 13, 0, 1, 14, 13, 4, 13, 14],
	[11, 17, 6, 6, 17, 9, 8, 17, 5, 5, 17, 10],
	[8, 5, 7, 7, 11, 8],
	[13, 11, 8, 13, 7, 11, 13, 5, 7, 13, 4, 1, 13, 1, 0],
	[8, 0, 2, 8, 2, 7, 8, 7, 11],
	[2, 7, 1, 7, 11, 1, 4, 1, 11, 8, 4, 11],
	[3, 1, 16, 1, 6, 16, 5, 7, 16, 8, 5, 16, 11, 8, 16],
	[13, 6, 16, 6, 13, 4, 16, 8, 13, 8, 16, 11, 13, 7, 16, 7, 13, 5, 16, 0, 13, 0, 16, 3],
	[8, 0, 12, 8, 12, 16, 8, 16, 11, 3, 12, 16, 2, 7, 16, 2, 16, 12, 1, 6, 16, 1, 16, 12],
	[16, 4, 6, 16, 8, 4, 16, 11, 8, 16, 3, 2, 16, 2, 7],
	[8, 5, 11, 5, 2, 11, 2, 3, 11],
	[12, 13, 2, 13, 5, 2, 12, 13, 1, 13, 4, 1, 13, 12, 0, 8, 13, 11, 13, 12, 11, 12, 3, 11],
	[8, 0, 3, 3, 11, 8],
	[8, 4, 11, 4, 1, 11, 1, 3, 11],
	[8, 5, 11, 5, 2, 11, 6, 11, 2, 1, 6, 2],
	[5, 2, 13, 2, 0, 13, 11, 8, 13, 6, 11, 13, 4, 6, 13],
	[8, 0, 1, 8, 1, 6, 8, 6, 11],
	[4, 6, 11, 11, 8, 4],
	[7, 11, 5, 11, 9, 5, 9, 4, 5],
	[1, 11, 9, 1, 7, 11, 7, 1, 0, 7, 0, 5],
	[4, 2, 11, 0, 2, 4, 9, 4, 11, 7, 11, 2],
	[1, 2, 7, 1, 7, 11, 1, 11, 9],
	[14, 16, 9, 16, 11, 9, 14, 16, 1, 16, 3, 1, 16, 14, 6, 7, 16, 5, 16, 14, 5, 14, 4, 5],
	[16, 5, 7, 16, 0, 5, 16, 3, 0, 16, 11, 9, 16, 9, 6],
	[0, 14, 4, 0, 12, 14, 1, 14, 12, 7, 12, 2, 7, 16, 12, 3, 12, 16, 9, 16, 11, 9, 14, 16, 6, 16, 14],
	[6, 16, 9, 9, 16, 11, 7, 16, 2, 2, 16, 3],
	[5, 9, 4, 5, 11, 9, 11, 5, 2, 11, 2, 3],
	[12, 9, 1, 12, 11, 9, 12, 3, 11, 12, 0, 5, 12, 5, 2],
	[3, 11, 9, 3, 9, 4, 3, 4, 0],
	[9, 1, 3, 3, 11, 9],
	[14, 2, 1, 14, 5, 2, 14, 4, 5, 14, 6, 11, 14, 11, 9],
	[9, 6, 11, 5, 2, 0],
	[1, 14, 0, 0, 14, 4, 9, 14, 11, 11, 14, 6],
	[11, 9, 6],
	[10, 7, 6, 6, 9, 10],
	[1, 0, 14, 0, 4, 14, 7, 6, 14, 10, 7, 14, 9, 10, 14],
	[15, 9, 10, 15, 6, 9, 15, 7, 6, 15, 5, 0, 15, 0, 2],
	[15, 4, 14, 4, 15, 5, 14, 10, 15, 10, 14, 9, 15, 6, 14, 6, 15, 7, 14, 2, 15, 2, 14, 1],
	[9, 10, 7, 9, 7, 3, 9, 3, 1],
	[10, 7, 9, 7, 3, 9, 4, 9, 3, 0, 4, 3],
	[9, 10, 15, 9, 15, 12, 9, 12, 1, 2, 15, 12, 5, 0, 12, 5, 12, 15, 7, 3, 12, 7, 12, 15],
	[7, 3, 15, 3, 2, 15, 9, 10, 15, 4, 9, 15, 5, 4, 15],
	[10, 2, 3, 10, 3, 6, 10, 6, 9],
	[14, 12, 6, 12, 3, 6, 14, 12, 4, 12, 0, 4, 12, 14, 1, 2, 12, 10, 12, 14, 10, 14, 9, 10],
	[10, 6, 9, 10, 3, 6, 3, 10, 5, 3, 5, 0],
	[14, 5, 4, 14, 10, 5, 14, 9, 10, 14, 1, 3, 14, 3, 6],
	[10, 2, 1, 1, 9, 10],
	[2, 0, 10, 0, 4, 10, 4, 9, 10],
	[9, 10, 5, 9, 5, 0, 9, 0, 1],
	[5, 4, 9, 9, 10, 5],
	[4, 8, 6, 8, 10, 6, 10, 7, 6],
	[6, 1, 7, 1, 0, 7, 10, 7, 0, 8, 10, 0],
	[15, 13, 2, 13, 0, 2, 15, 13, 10, 13, 8, 10, 13, 15, 5, 4, 13, 6, 13, 15, 6, 15, 7, 6],
	[5, 8, 15, 8, 10, 15, 1, 2, 15, 6, 1, 15, 7, 6, 15],
	[7, 8, 10, 8, 1, 4, 1, 7, 3, 8, 7, 1],
	[0, 8, 10, 0, 10, 7, 0, 7, 3],
	[15, 12, 2, 12, 15, 7, 3, 12, 7, 12, 13, 0, 13, 12, 1, 4, 13, 1, 13, 15, 5, 15, 13, 8, 10, 15, 8],
	[2, 15, 3, 3, 15, 7, 10, 15, 8, 8, 15, 5],
	[2, 3, 10, 3, 6, 10, 8, 10, 6, 4, 8, 6],
	[12, 10, 2, 12, 8, 10, 12, 0, 8, 12, 3, 6, 12, 6, 1],
	[8, 10, 13, 10, 5, 13, 6, 4, 13, 3, 6, 13, 0, 3, 13],
	[6, 1, 3, 10, 5, 8],
	[2, 1, 4, 2, 4, 8, 2, 8, 10],
	[10, 2, 0, 0, 8, 10],
	[4, 13, 1, 1, 13, 0, 5, 13, 10, 10, 13, 8],
	[10, 5, 8],
	[7, 6, 9, 7, 9, 8, 7, 8, 5],
	[7, 6, 14, 7, 14, 13, 7, 13, 5, 4, 14, 13, 9, 8, 13, 9, 13, 14, 1, 0, 13, 1, 13, 14],
	[0, 2, 8, 2, 7, 8, 9, 8, 7, 6, 9, 7],
	[14, 7, 6, 14, 2, 7, 14, 1, 2, 14, 9, 8, 14, 8, 4],
	[7, 8, 5, 7, 9, 8, 9, 7, 3, 9, 3, 1],
	[4, 9, 13, 9, 8, 13, 3, 0, 13, 7, 3, 13, 5, 7, 13],
	[12, 8, 0, 12, 9, 8, 12, 1, 9, 12, 2, 7, 12, 7, 3],
	[8, 4, 9, 3, 2, 7],
	[2, 6, 8, 3, 6, 2, 5, 2, 8, 9, 8, 6],
	[8, 14, 9, 8, 13, 14, 4, 14, 13, 2, 13, 5, 2, 12, 13, 0, 13, 12, 6, 12, 3, 6, 14, 12, 1, 12, 14],
	[3, 6, 0, 6, 9, 0, 9, 8, 0],
	[6, 14, 3, 3, 14, 1, 4, 14, 8, 8, 14, 9],
	[1, 9, 8, 1, 8, 5, 1, 5, 2],
	[8, 13, 9, 9, 13, 4, 0, 13, 2, 2, 13, 5],
	[8, 0, 1, 1, 9, 8],
	[8, 4, 9],
	[5, 7, 6, 6, 4, 5],
	[7, 6, 1, 7, 1, 0, 7, 0, 5],
	[4, 0, 6, 0, 2, 6, 2, 7, 6],
	[7, 6, 1, 1, 2, 7],
	[7, 3, 5, 3, 1, 5, 1, 4, 5],
	[5, 7, 3, 3, 0, 5],
	[0, 12, 4, 4, 12, 1, 3, 12, 7, 7, 12, 2],
	[2, 7, 3],
	[4, 5, 2, 4, 2, 3, 4, 3, 6],
	[1, 12, 6, 6, 12, 3, 2, 12, 5, 5, 12, 0],
	[0, 3, 6, 6, 4, 0],
	[3, 6, 1],
	[2, 1, 4, 4, 5, 2],
	[5, 2, 0],
	[0, 1, 4],
	[],
]

func _ready():
	#print_bc_march_table()
	pass
